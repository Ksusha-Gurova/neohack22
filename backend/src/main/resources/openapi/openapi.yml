openapi: "3.0.0"
info:
  version: 1.0.0
  title: User
servers:
  - url: localhost:8080
paths:
  /users/login:
    post:
      tags:
        - users
      summary: логин
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserLoginDto"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenDto"


  /users/registration:
    post:
      tags:
        - users
      summary: регистрация
      operationId: registration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRegistrationDto"
      responses:
        200:
          description: OK

  /users:
    get:
      tags:
        - users
      summary: вернуть всех пользователей
      operationId: getAllUsers
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserResponseDto"

    post:
      tags:
        - users
      summary: обновить юзера
      operationId: updateUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRequestDto"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserAllInfoResponseDto"

  /users/{id}:
    get:
      tags:
        - users
      summary: вернуть пользователя по id
      operationId: getUser
      parameters:
        - name: id
          in: path
          description: User id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserAllInfoResponseDto"

#  /users/{id}/courses/assigned:
#  /users/{id}/tasks/assigned:
#  /users/{id}/courses/created:
#  /users/{id}/tasks/created:

  /courses/available:
    get:
      tags:
        - courses
      summary: вернуть все доступные курсы
      operationId: getAllPublicCourses
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CourseAllInfoResponseDto"

  /courses:
    post:
      tags:
        - courses
      summary: создать/обновить курс
      operationId: updateCourse
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CourseRequestDto"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CourseAllInfoResponseDto"

  /courses/{id}:
    get:
      tags:
        - courses
      summary: вернуть курс по id
      operationId: getCourse
      parameters:
        - name: id
          in: path
          description: Course id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CourseAllInfoResponseDto"

    delete:
      tags:
        - courses
      summary: удалить курс по id
      operationId: deleteCourse
      parameters:
        - name: id
          in: path
          description: Course id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK

  /courses/{id}/lessons:
    get:
      tags:
        - courses
      summary: вернуть все уроки курса
      operationId: getLessonsByCourseId
      parameters:
        - name: id
          in: path
          description: Course id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/LessonAllInfo"

  /lessons:
    post:
      tags:
        - lessons
      summary: создать/обновить урок
      operationId: updateLessons
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LessonsRequestDto"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LessonAllInfo"


  /lessons/{id}:
    get:
      tags:
        - lessons
      summary: вернуть урок по id
      operationId: getLesson
      parameters:
        - name: id
          in: path
          description: Lesson id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LessonAllInfo"

    delete:
      tags:
        - lessons
      summary: удалить урок по id
      operationId: deleteLesson
      parameters:
        - name: id
          in: path
          description: Lesson id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK


  /lessons/{id}/tasks:
    get:
      tags:
        - lessons
      summary: вернуть все задачи урока
      operationId: getTasksByLessonId
      parameters:
        - name: id
          in: path
          description: Lesson id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TasksAllInfo"

#  /task:
#  /task/{id}:
#  /task/{id}/questions:

  /tasks:
    post:
      tags:
        - tasks
      summary: создать/обновить задачу/тест
      operationId: saveOrUpdateTask
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TaskRequestDto"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TasksAllInfo"


  /tasks/{id}:
    get:
      tags:
        - tasks
      summary: вернуть задачу/тест по id
      operationId: getTaskById
      parameters:
        - name: id
          in: path
          description: Task id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TasksAllInfo"
    delete:
      tags:
        - tasks
      summary: удалить задачу/тест по id
      operationId: deleteTask
      parameters:
        - name: id
          in: path
          description: Lesson id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK

  /tasks/{id}/questions:
    get:
      tags:
        - tasks
      summary: вернуть все вопросы этого теста/задачи
      operationId: getQuestionsByTaskId
      parameters:
        - name: id
          in: path
          description: Lesson id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/QuestionAllInfo"

#  /questions:
#  /questions/{id}:
#  /questions/{id}/answers:

#  /statistics/courses:
#  /statistics/courses/{id}:
#
#  /statistics/lessons:
#  /statistics/lessons/{id}:
#
#  /statistics/task:
#  /statistics/task/{id}:

components:
  schemas:
    UserResponseDto:
      type: object
      required:
        - id
        - firstName
        - lastName
      properties:
        id:
          type: integer
          format: int64
        firstName:
          type: string
        lastName:
          type: string

    UserRequestDto:
      type: object
      required:
        - firstName
        - lastName
        - email
        - birthdate
        - city
      properties:
        id:
          type: integer
          format: int64
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          pattern: ^[\w\.]{2,50}@[\w\.]{2,20}
        birthdate:
          type: string
          format: date
        city:
          type: string
        password:
          type: string
        registrationDate:
          type: string
          format: date
        active:
          type: boolean

    UserAllInfoResponseDto:
      type: object
      required:
        - firstName
        - lastName
        - email
        - birthdate
        - city
      properties:
        id:
          type: integer
          format: int64
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          pattern: ^[\w\.]{2,50}@[\w\.]{2,20}
        birthdate:
          type: string
          format: date
        city:
          type: string
        registrationDate:
          type: string
          format: date
        active:
          type: boolean

    CourseRequestDto:
      type: object
      required:
        - name
        - description
        - isPrivate
        - status
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        isPrivate:
          type: boolean
        cover:
          type: string
        status:
          type: string
          enum:
            - available
            - temporarily_unavailable
            - unavailable
        interestTags:
          type: array
          items:
            type: integer
            format: int64
        author:
          type: integer
          format: int64

    CourseAllInfoResponseDto:
      type: object
      required:
        - id
        - name
        - description
        - isPrivate
        - cover
        - status
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        isPrivate:
          type: boolean
        cover:
          type: string
        status:
          type: string
          enum:
            - available
            - temporarily_unavailable
            - unavailable
        interestTags:
          type: array
          items:
            $ref: "#/components/schemas/SimpleResponseDto"

    InterestTagDto:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string

    LessonAllInfo:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        startDate:
          type: string
          format: date
        duration:
          type: integer
        courseId:
          type: integer
          format: int64
        isPrivate:
          type: boolean
        contentType:
          type: string
          enum:
            - image
            - video
            - text
        content:
          type: string
        teacher:
          type: integer
          format: int64
        cover:
          type: string
        publicationDate:
          type: string
          format: date
        status:
          type: string
          enum:
            - open
            - close
        author:
          type: integer
          format: int64

    TasksAllInfo:
      type: object
      properties:
        id:
          type: integer
          format: int64
        lessonId:
          type: integer
          format: int64
        deadline:
          type: string
          format: date-time
        description:
          type: string
        name:
          type: string
        questions:
          type: array
          items:
            $ref: "#/components/schemas/SimpleResponseDto"

    QuestionAllInfo:
      type: object
      properties:
        id:
          type: integer
          format: int64
        task_id:
          type: integer
          format: int64
        questionText:
          type: string
        answers:
          type: array
          items:
            $ref: "#/components/schemas/SimpleResponseDto"

    LessonsRequestDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        startDate:
          type: string
          format: date
        duration:
          type: integer
        courseId:
          type: integer
          format: int64
        isPrivate:
          type: boolean
        contentType:
          type: string
          enum:
            - image
            - video
            - text
        content:
          type: string
        teacher:
          type: integer
          format: int64
        cover:
          type: string
        status:
          type: string
          enum:
            - open
            - close
        author:
          type: integer
          format: int64

    TaskRequestDto:
      type: object
      required:
        - name
        - description
        - deadline
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        deadline:
          type: string
          format: date-time
        description:
          type: string
        questions:
          type: array
          items:
            type: integer
            format: int64

    SimpleResponseDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string

    UserLoginDto:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          pattern: ^[\w\.]{2,50}@[\w\.]{2,20}
        password:
          type: string

    TokenDto:
      type: object
      required:
        - token
      properties:
        token:
          type: string

    UserRegistrationDto:
      type: object
      required:
        - firstName
        - lastName
        - email
        - birthdate
        - city
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          pattern: ^[\w\.]{2,50}@[\w\.]{2,20}
        birthdate:
          type: string
          format: date
        city:
          type: string
        password:
          type: string
        registrationDate:
          type: string
          format: date
        active:
          type: boolean
        role:
         type: string
         enum:
           - role_student
           - role_teacher
           - role_admin

    ErrorMessageDto:
      type: object
      properties:
        message:
          type: string









