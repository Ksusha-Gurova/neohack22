openapi: "3.0.0"
info:
  version: 1.0.0
  title: User
servers:
  - url: localhost:8080
paths:
  /users:
    get:
      tags:
        - users
      summary: вернуть всех пользователей
      operationId: getAllUsers
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserResponseDto"

    post:
      tags:
        - users
      summary: создать/обновить юзера
      operationId: updateUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRequestDto"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserAllInfoResponseDto"

  /users/{id}:
    get:
      tags:
        - users
      summary: вернуть пользователя по id
      operationId: getUser
      parameters:
        - name: id
          in: path
          description: User id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserAllInfoResponseDto"

#  /users/{id}/courses/assigned:
#  /users/{id}/tasks/assigned:
#  /users/{id}/courses/created:
#  /users/{id}/tasks/created:

#  /courses:
#  /courses/{id}:
#  /courses/{id}/lessons:
#
#  /lessons:
#  /lessons/{id}:
#  /lessons/{id}/tasks:
#
#  /task:
#  /task/{id}:
#  /task/{id}/questions:

#  /questions:
#  /questions/{id}:
#  /questions/{id}/answers:

#  /statistics/courses:
#  /statistics/courses/{id}:
#
#  /statistics/lessons:
#  /statistics/lessons/{id}:
#
#  /statistics/task:
#  /statistics/task/{id}:

components:
  schemas:
    UserResponseDto:
      type: object
      required:
        - id
        - firstName
        - lastName
      properties:
        id:
          type: integer
          format: int64
        firstName:
          type: string
        lastName:
          type: string

    UserRequestDto:
      type: object
      required:
        - firstName
        - lastNaame
        - email
        - birthdate
        - phone
        - city
      properties:
        id:
          type: integer
          format: int64
        firstName:
          type: string
        lastNaame:
          type: string
        email:
          type: string
          pattern: ^[\w\.]{2,50}@[\w\.]{2,20}
        birthdate:
          type: string
          format: date
        city:
          type: string
        phone:
          type: string
          pattern: /\(?([0-9]{3})\)?([ .-]?)([0-9]{3})\2([0-9]{4})/
        password:
          type: string
        registrationDate:
          type: string
          format: date
        active:
          type: boolean

    UserAllInfoResponseDto:
      type: object
      required:
        - firstName
        - lastNaame
        - email
        - birthdate
        - phone
        - city
      properties:
        id:
          type: integer
          format: int64
        firstName:
          type: string
        lastNaame:
          type: string
        email:
          type: string
          pattern: ^[\w\.]{2,50}@[\w\.]{2,20}
        birthdate:
          type: string
          format: date
        city:
          type: string
        phone:
          type: string
          pattern: /\(?([0-9]{3})\)?([ .-]?)([0-9]{3})\2([0-9]{4})/
        registrationDate:
          type: string
          format: date
        active:
          type: boolean





